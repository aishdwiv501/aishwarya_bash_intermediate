#CHAPTER 6
#2nd June, 2025

#shift command
#If you use an option while running arguments,
#the option gets a positional variable assigned to it
#Like,
teatime -o alice hatter
   $0   $1   $2    $3

#The usage of options shifts around the positional variable, we can essentially reset it using shift
So,
if [ $1 = -o ]; then
	shift
	echo "$1"
fi

#!/bin/bash
#try running bash shift.sh apple banana cherry
echo "All arguments before shifting: $@"

# Process each argument one by one using shift
while [ $# -gt 0 ]; do
    echo "Current argument: $1"
    shift #first, its apple, then first argument gets shifted to banana, then to cherry
    #but at the same time, shift also removes arguments
done

echo "All arguments after shifting: $@" #Now no more arguments, so this does not print anything


#CODE FOR PROCESSING AND REMOVING OPTIONS
while [ -n "$(echo $1 | grep '-')" ]; do
	case $1 in
		-a ) process option -a
		;;
		-b ) process option -b
		;;
		-c ) process option -c
		;;
		* ) echo 'usage: alice [-a] [-b] [-c] args...'
			exit 1
	esac
	shift
done
normal processing of arguments...


#GETOPTS
###########################################################Refer later


#TYPED VARIABLES
#Use the declare command to declare certain options
#As discussed before, -o turns the option on and +o turns it off

#DECLARE OPTIONS
-a #Treat variables as arrays
-f #Use function names only
-F #Display function names w/o definition
-i #variables are treated as integers
-r #makes the variables read-only
-x #marks the variables for export via the environment

#FOR EXAMPLE
val1=12 val2=6
result=val1*val2
echo $result

#Output: val1*val2

declare -i val3=13 val4=4
result2=val3*val4
echo $result2

#Output: 52

#INTEGER AND ARITHMETIC VARIABLES

#Integer variables are denoted as $(())
#can be called without dollar signs though

#Arithmetic operators are very similar to java and python

# << : Left bitwise shift
1 << 4 gives 16 because:

00000001   :   00010000 which is 16

#Table at page 403-404 is extremely helpful for learning arithmetic operators in bash

# >> : Right bitwise shift
# ++ --

i=0
echo $i
#Output: 0

echo $((i++))
#Output: 0

echo $i
#Output: 1

echo $((++i))
#Output: 2

echo $i
#Output: 2

#Relational operators
< :Lt
> :Gt
<= Le
>= Ge
== Eq
!= Ne
&& Logical and
|| Logical or


# -gt and -lt are used in test cases  for examples:

if [5 -gt 3]; then


#ARITHMETIC FOR LOOP
#SYNTAX

for (( initialisation; ending condition; update))
do
	statements...
done

#Initialisation is the condition being checked in the for loop
#If its true then ending condition is evaluated, if that is true
#it executes statements
#Then it repeats by checking UPDATES
#Loop continues until ending condition == false or the loop is
#exited via one of the statements

#Multiplication table example code

for (( i=1; i<=12; i++))
do
	for (( j=1; j<=12; j++))
	do
		echo -ne "$((j*i))\t"    #-n: don't print in newline
		#-e: Enable escape sequences like \t
		#\t: inserts a table between sequences
		done
	echo
done

#OUTPUT: 
1	2	3	4	5	6	7.....
2	4	6	8	10	12	14....
................
12	24	36	48..........


#ARRAYS
Arrays are like series of slots that hold values.
Each slot is known as an index and can be accessed using a numerical index

name[0]="first"
name[1]="second"
name[2]="third"

echo $name[0]


#!/bin/bash
fruits=("cherry" "banana" "apple" "mango")

#You can also do it individually like:
#fruits[0]="cherry"   fruits[1]="banana"  etc.

#echo ${fruits[0]} can do this for individual calling or...

for fruit in ${fruits[@]}; 
do
    echo $fruit
done

#For number of elements in the array, use:

echo ${#fruits[@]}   #gives 4
unset fruits[3]  #removed mango
echo ${fruits[@]}
echo ${#fruits[@]}


#CODE FOR SORTING NUMBERS IN AN ARRAY

values=(39 5 36 12 9 3 2 30 4 18 22 1 28 25)
numvalues=${#values[@]}
for (( i=0; i < numvalues; i++ )); do
lowest=$i
for (( j=i; j < numvalues; j++ )); do
if [ ${values[j]} -le ${values[$lowest]}; then
lowest=$j
fi
done
temp=${values[i]}
values[i]=${values[lowest]}
values[lowest]=$temp
done
for (( i=0; i < numvalues; i++ )); do
echo -ne "${values[$i]}\t"
done
echo
