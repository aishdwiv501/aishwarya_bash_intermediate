#CHAPTER 7
#DATE: 3rd JUNE, 2025

#INPUT/OUTPUT AND COMMAND-LINE PROCESSING

#I/O Redirectors
#Refer to 428-432

#>> appends to the file instead of overwriting it
#other than that, it works the same as >.

#You can prevent the shell from overwriting a file with set -o noclobber
#However, >| overrides noclobber
#"Do it anyway, dammit!"- pg 433


#here-document 
#Used to input multiple lines in a code
name="Alice"
cat << END
Hello, $name
Today is $(date)
END


name="Person"
cat << COOL
Hello, $name
Ready to work?
COOL

#FILE DESCRIPTORS

#Low-level integer handle assigned by Unix to refer to an open file or stream.

0: Standard input (stdin)
1: Standard output (stdout)
3: Standard error (stderr)

command 2>filename   #send error messages to a separate file
2>&1 #send standard error to same place as standard output

#STRING I/O

#ECHO
-e #turns on interpretation of backslash escaped characters
-E #Turns off """"
-n #Omits the final newline

#ECHO ESCAPE SEQUENCES
#starts with a backslash
#refer to page 444-446

#printf
#Does not automatically provide a newline.
#printf "hello world"

#SYNTAX
printf format-string [arguments]
printf "%s %s\n" hello world

#READ
read var1 var2...
#USED FOR GETTING USER INPUT

#read -p "Enter your sequence:" name     #inputs sequence

#read has total of eight options:
-a: puts into array
read -a people
Input: alice duchess dodo
echo ${people[2]}
Output: dodo
-d: delimiter
echo "first:second:third" | while read -d ':' part; do
  echo "Got: $part"
done
Output: prints first and second but not third
-e: Allows you to use command line features while inputting some text
-n: Here, you enter a certain fixed number of arguments and the code
runs itself, no need to press Enter
-p: Lets you print a statement on the same line as input
read -p "Enter your sequence:" filename
-r: Tells the prompt to not treat backslash as special characters
-t: adds a timeout feature. only makes the user wait for a fixed amount of time for an input
read -t 5 name  #gives the user only 5 seconds 
-s: makes input silent; nothing is shown on the screen
very useful for passwords
