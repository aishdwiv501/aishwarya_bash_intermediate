#CHAPTER 8
#Date: 11th June, 2025

******************** PROCESS HANDLING *********************

UNIX provides user-controlled multitasking.

JOB CONTROL
One of the most common ways is to send a job to background using "&".
Once its running, you cab let it run to completion, bring it to the foreground or
send it to message called signal.

Foreground and Background

fg brings background job into the foreground
It picks the most recent background job.

Use the command "jobs" to see which jobs are running currently

jobs -l : Process IDs
jobs -p : Only process IDs
jobs -n : Only lists jobs whose status has changed since shell's last report
jobs -r : Only shows running jobs
jobs -s : Only shows stopped jobs
jobs -x : Execute a command

#see table 8-1, pg 514-515 for ways to refer to background jobs

##########################################################################

SUSPENDING A JOB

For putting a foreground job into background job, you need to suspend it
so the shell regains control of your terminal.

To suspend a job, type CTRL-Z while it is running.
This is analogous to typing CTRL-C (interrupt key), but in CTRL-Z, we can
resume the job after stopping it.

When you type CTRL-Z, this is what happens
[1]+ Stopped         command

*If you type CTRL-Z followed by bg, you move the job to the background

##########################################################################

SIGNALS

Signals are notifications sent to a process to notify it of an event. These are part of Unix/Linux's way of managing processes.

Use kill -l to get a list of all signals on system.

##########################################################################

CONTROL-KEY SIGNALS

CTRL-C : INT (interrupt)
CTRL-Z : TSTP (terminal stop)
CTRL-\ : QUIT

Can be customized using stty command. 
Usual syntax: stty signame char

Example: to set your INT key to CTRL-X on most systems, use:
stty intr ^X

##########################################################################

kill

By default, kill sends the TERM (terminate) signal. 

SYNTAX: kill (signal) PID

Use kill -l to see all possible signals

kill %1  : Job ID: 1; Uses TERM by default
If this works, output:

[1]+ Terminated            alice

If it doesn't work,
kill -QUIT %1
If this works, output:

[1]+ Exit 131              alice

131 is the exit status.

If QUIT doesn't work too, then use KILL as last resort

kill -KILL %1

[1]+ Killed                alice


****USE KILL ONLY AS A LAST RESORT****

#########################################################################

ps

Provides the user with PID information and other extra information as well.

If you are running different jobs on different windows, using ps will only give
you information about only the jobs running in that window.

ps -a will give information about all jobs running in all different windows

#########################################################################

trap

trap can be used to safely respond to invalid inputs
SYNTAX:

trap cmd sign1 sig2...

For a list of set traps, just use the trap command

trap "echo 'You hit control-C!'" INT
trap "echo 'You tried to kill me!'" TERM
while true; do
sleep 60
done

*If you run this code without the TERM statement, and press CTRL-C, it won't quit,
instead, it will print, "You hit control-C!"
*Use CTRL-Z instead to stop.

*Now instead of running the task in the foreground, running it in the background using,
bash sleep.sh &

Use jobs command to check the job ID of the above command.

If you now use the TERM command, and run the script in the background and try to kill it using
kill %3 (for example)
It will show "You tried to kill me!"

In this case, it will keep on running it, use kill -KILL %3, to terminate the job

#########################################################################

Process ID Variables and Temporary Files

$$: Used as process ID value of the current shell

Basically, when you run ps, the value of $$ is the value of the bash PID.

$!: Contains the PID of the most recently invoked background job

#########################################################################

Ignoring SIGNALS

Let's say you want to ignore signals like HUP (hangup). This occurs when disconnection occurs
Can occur on some UNIX systems and ends up killing the process which receives it.

In such cases, can write a simple function,

function ignorehup {
	trap "" HUP
	eval "$@"
}

#########################################################################

disown

disown is also used to remove processes from a list of jobs.

#########################################################################

RESETTING TRAPS

trap - : resets traps

###############

Coroutines

When two (or more) processes are explicitly programmed to run simultaneously and
possibly communicate with each other, we call them coroutines.

Pipeline is an example of coroutines.

###############

wait

wait is used to pause the script until background processes finish.

sleep 3 &
sleep 5 &
wait
echo "All background jobs are done!"

###############

Advantage and Disadvantage of Coroutines

Refer page 550-551

########################################################################

PARALLELIZATION

Running mutliple tasks at the same time.

For example, the use of & to run multiple background tasks

######################

SUBSHELLS
A subshell is a child process created by the shell to run commands in isolation to the parent shell.

Use, () to create a subshell. Commands like cd used in the subshell do not affect the parent shell.

(
  cd /tmp
  echo "Inside subshell"
)


######################

NESTED SUBSHELLS
Running a subshell inside another subshell.

(
  echo "Level 1"
  (
    echo "Level 2"
  )
)

######################

PROCESS SUBSTITUTION
Feeds the output of a command as input of another

diff <(ls dir1) <(ls dir2)
