#Chapter 1 CATCH UP
#DATE : 26 MAY 2025

#NAVIGATING SHELL 

#ALL OF THE FOLLOWING COMMANDS ARE PERFORMED IN THE TERMINAL

echo $SHELL #for finding out which shell is running
#Ideal response: /bin/bash #bash is the shell being used

whereis bash #finding out the directory location of bash
whence bash
which bash   #incase whereis bash doesn't work

#COMMANDS ARGUMENTS AND OPTIONS

lp -h myfile #lp is command, -h is option and myfile is argument
lp -d lp1 -h myfile #has two options and one argument
#first is -d lp1; second is -h

#Press CTRL-D or type exit to end session

#FILES AND DIRECTORIES
#Regular, Executable and Directories
#Working directory is set to home or login directory by default
#all home directories are contained under root 
#root has no name on the system

#full or absolute pathname and relative pathnames

/home/filename #system assumes home directory by default when looking for an argument for a command

#If name of home directory is not known, use tilde notation for directly assuming the home directory location
~user/filename

#CHANGE DIRECTORY USING cd
cd book/wonderland #auto assumption of home directory location by system
cd .. #parent of this directory
cd - #goes back to previous directory

#FILENAMES, WILDCARDS and PATHNAME EXPANSION
#ls is used with various options for different use cases
ls -l # (long) lists details of file's owner, size, time of last modification etc.
ls -a # (all) lists hidden files

#WILDCARDS
#Used to specify a set of files

? #for a single character
program.? #will generate program.c, program.o but not program.log

* #any string of characters
*.txt #will generate all txt files

[set] #any character in set
[abc] #a,b or c
[.,;] #period, comma or semicolon

[!set] #any character not in set
[!.,;] #any character that is not period, comma or semicolon

ls *.[cho] #expands to all files whose names end in a period followed by a c,h, or o
ls /usr* #lists all the files in all directories starting with usr
le /usr*/[be]* #contains files starting with b and e only

#BRACE EXPANSION
#Pathname expansion applies to already existing files and directories.
#Brace expansion applies to any string; it doesn't have to be a file
echo b{ar{d,n,k},ed}s #prints bars, bards, banks and beds
echo {d...h} #d, e, f, g, h



#INPUT AND OUTPUT
#STANDARD I/O
#Three standard channels are followed: Standard Input (stdin), Standard Output (stdout) and Standard Error (stderr)

#DATA FILTERING
#cat: Copy input to output
#grep: Search for strings in input
#sort: Sort lines in the input
#cut : Extract columns from input
#sed: Perform editing operations on input
#tr: Translate characters in input to other characters

#commands can be put onto contents of a file
#THIS IS I/O REDIRECTION

cat < filename #makes it so that all of the contents of the file are printed on the terminal

date > now #makes it so that instead of showing the user the date info, it put it into a file named "now"

#ANOTHER EXAMPLE OF I/O REDIRECTION

cp file1 file2 #copies contents of file1 into file2
cat < file1 > file2 #basically means that take the input from file1 and send the output to file2

#PIPELINES
#Sending the output of one command into the input of another command

more: prints output screen by screen rather than doing it in one go

sort < cheshire | more #sorts cheshire and print it out screen by screen
#refer page number 77-78 for more details

#BACKGROUND JOBS
#Pipelines can help us do multiple jobs at once which a lot of commercial OS don't have.
#Like output of one program can be used as output of another

#if we want to run a background job, we can use & after the command
uncompress gcc.tar & #runs the task in the background and we can access the terminal

jobs #for checking background tasks
#refer to page 82-83

#BACKGROUND JOBS AND PRIORITIES
#Performance is usually worse with background tasks.
#Every job is assigned a priority
#Commands entered from the shell have similar priority compared to administrator commands


nice #lowers priority of a job


#SPECIAL CHARACTERS AND QUOTING
#Special characters have particular meanings to the Shell
#refer to 86-89 for list

#QUOTING
#strips off all meaning from special characters
'&' #removes the background job importance of &

#BACKSLASH ESCAPING
#Using backslash instead of quotes
\& #works same as quoting

#if you want to write Hatter's tea party
$ echo 'Hatter'\''s tea party' or $echo Hatter \'s tea party

#CONTINUING LINES
#Use \ or " (unclosed quotation)

echo This is a long sentence \
spanning multiple lines.

echo "This is a long sentence
spanning multiple lines."

#CONTROL KEYS
#refer 99-100

#HELP
help re #gives read, readonly and return
help 're*' #same as above
help 're??' #only return read amongst others