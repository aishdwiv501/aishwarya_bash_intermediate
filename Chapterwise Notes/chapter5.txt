#CHAPTER 5
#DATE: 29th MAY, 2025

#FLOW CONTROL
#Gives control to the programmer over running only certain portions of a program.

#Bash supports following flow control constructs:
#if/else
#for and while
#until
#case
#select

#if/else
#SYNTAX:
if condition
then
	statements
[elif condition
	then statements...]
[else
 statements]
fi

#CODE EXAMPLE FOR if-elif-else

#this is a file recognizer which recognizes whether a file is FASTA, FASTQ, SAM or VCF based on the contents of the file
#however, this file will not work on compressed file types like .gz, for that, we will have to change grep to zgrep

#!/bin/bash
filename=$1

if grep -q "^>" "$filename"; then
    echo "This looks like a FASTA file due to it starting with '>'."
elif grep -q "@" "$filename" && grep -q "+" "$filename"; then
    echo "This looks like a FASTQ file due to the presence of both "@" and "+"."
elif grep -q "@" "$filename" && grep -q "chr" "$filename"; then
    echo "This seems to be a SAM file."
elif grep -q "##" "$filename" && grep -q "CHROM" "$filename"; then
    echo "This seems to be a VCF file."
else
    echo "Please try again!"
fi

#RETURN 
#return is used in functions to provide an exit status to a function.
#EXAMPLE

function{
	if [[ -f $1 ]]; then
		return 0
	else
		return 1
	fi
}
#the above code is for checking whether a file exists or not

#Logical AND and logical OR
#      &&            ||

#CONDITION TESTS
# Conditions are surrounded by [] for an if-elif sentence

#FOR EXAMPLE:
if [[str1 = str2]]; then
	echo "Yes."
elif [[str != str2]]; then
	echo "No."
fi

-n str1 #str1 is not null
-z str1 #str1 is null

#EXIT statement
#exit is used to end an entire script

#FOR EXAMPLE
if [[str1 != str2 ]]; then
	echo "Error!"
	exit
fi

#FILE ATTRIBUTE CHECKING
#refer 334-336
#revise the code at 338-339


#INTEGER CONDITIONALS
-lt #less than
-le #less than or equal
-eq #equal
-gt #greater than
-ge #greater than or equal
-ne #Not equal


#FOR LOOP
#SYNTAX 
for name [in list]
do
	statement that can use
		$name
done

#EXAMPLE CODE

#!/bin/bash

fasta()
{
    filename=$1

    if grep -q "^>" "$filename"; then
        echo "The file has FASTA sequence(s)"
        return 0
    else
        echo "No FASTA sequence"
        return 1
    fi
}

for filename in "$@"; do
    echo "Checking file: $filename"
    
    if ! fasta "$filename"; then
        echo "Invalid file type: $filename"
    fi
done


#CASE STATEMENT

case expression in
		pattern1
		)
		statements ;;
		 pattern2
		)
		statements ;;
		 ...
		esac
		
#!/bin/bash

#FILE CHECKER USING CASE STATEMENT

for file in "$@"; do
    echo "Checking file: $file"
    ext="${file##*.}" #extracts the extension of the file

    case "$ext" in
        jpg | jpeg | png | gif)
            echo "This is an image file."
            ;;
        txt | mg | log)
            echo "This is a text file."
            ;;
        pdf)
            echo "This is a pdf document"
            ;;
        sh)
            echo "This is a shell script"
            ;;
        *)
            echo "Unknown"
            ;;
        esac
done


#SELECT
#SYNTAX

select name
		[in
		list
		]
do
	statements that can use
		$name...
done

#!/bin/bash

# Infinite loop to keep showing the menu until the user chooses to exit
while true; do

    # Display menu using `select`
    echo "Please choose an option:"
    select choice in "View current date" "Show current directory" "List files in the directory" "Exit"; do
        
        # Match user's selection
        case $REPLY in
            1)
                # Option 1: Show current date and time
                echo "Current date and time: $(date)"
                break
                ;;
            2)
                # Option 2: Show current working directory
                echo "You are in: $(pwd)"
                break
                ;;
            3)
                # Option 3: List files in the current directory
                echo "Files in directory:"
                ls
                break
                ;;
            4)
                # Option 4: Exit the script
                echo "Goodbye!"
                exit 0
                ;;
            *)
                # Invalid option: user entered a number not in the list
                echo "Invalid option. Please try again."
                ;;
        esac
    done

    echo # Print a blank line for better readability between menu displays
done

#UNTIL

until command; 
	do
	statements...
	done
	
#Do statements until command runs correctly