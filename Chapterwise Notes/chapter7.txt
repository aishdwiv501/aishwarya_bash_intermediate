#CHAPTER 7
#DATE: 3rd JUNE, 2025

#INPUT/OUTPUT AND COMMAND-LINE PROCESSING

#I/O Redirectors
#Refer to 428-432

#>> appends to the file instead of overwriting it
#other than that, it works the same as >.

#You can prevent the shell from overwriting a file with set -o noclobber
#However, >| overrides noclobber
#"Do it anyway, dammit!"- pg 433


#here-document 
#Used to input multiple lines in a code
name="Alice"
cat << END
Hello, $name
Today is $(date)
END


name="Person"
cat << COOL
Hello, $name
Ready to work?
COOL

#FILE DESCRIPTORS

#Low-level integer handle assigned by Unix to refer to an open file or stream.

0: Standard input (stdin)
1: Standard output (stdout)
3: Standard error (stderr)

command 2>filename   #send error messages to a separate file
2>&1 #send standard error to same place as standard output

#STRING I/O

#ECHO
-e #turns on interpretation of backslash escaped characters
-E #Turns off """"
-n #Omits the final newline

#ECHO ESCAPE SEQUENCES
#starts with a backslash
#refer to page 444-446

#printf
#Does not automatically provide a newline.
#printf "hello world"

#SYNTAX
printf format-string [arguments]
printf "%s %s\n" hello world

#READ
read var1 var2...
#USED FOR GETTING USER INPUT

#read -p "Enter your sequence:" name     #inputs sequence

#read has total of eight options:
-a: puts into array
read -a people
Input: alice duchess dodo
echo ${people[2]}
Output: dodo
-d: delimiter
echo "first:second:third" | while read -d ':' part; do
  echo "Got: $part"
done
Output: prints first and second but not third
-e: Allows you to use command line features while inputting some text
-n: Here, you enter a certain fixed number of arguments and the code
runs itself, no need to press Enter
-p: Lets you print a statement on the same line as input
read -p "Enter your sequence:" filename
-r: Tells the prompt to not treat backslash as special characters
-t: adds a timeout feature. only makes the user wait for a fixed amount of time for an input
read -t 5 name  #gives the user only 5 seconds 
-s: makes input silent; nothing is shown on the screen
very useful for passwords

#########################################################################

STEPS IN COMMAND-LINE PROCESSING

1. Command is split into tokens that are separated by METACHARACTERS
(SPACE, TAB, NEWLINE, ;, (, ), <, >, |, &)

2. Checks the first token of each command to see if it is a keyword with no 
quotes or backslashes.
If it is an opening keyword, such as if, function, {, (, then it is a compound command.

3. If it is a compound command, shell sets things up internally for it.

*If the keyword isn't a compound command opener (then, else, do (control structure middle) or fi, done (end))
it shows a syntax error.

4. Checks the first word of each command against the list of aliases, if a match is found then the corresponding command is run.

5. Performs brace expansion. a{b,c} >> ab ac

6. Substitutes $HOME for ~ if it is at the beginning of a word

7. Parameter substitution for any expression that starts with a $.

8. Does command substitution for $(string).

9. Arithmetic substitution for $((string)).

10. Now, it uses $IFS for splitting parts of line that arose from P,C and A substitution.

IFS=":"
var="one:two:three"
echo $var

11. Performs wildcard expansion.
[abc] = a,b,c

12. Uses first word as command by looking it up as a:
a. function command
b. builtin
c. file in $PATH

13. Runs the command after setting up I/O redirection and other such things.

###########################################################################

QUOTING

Ways to skip certain steps

Single quotes ('') skips everything upto step 11.
Double quotes ("") skips 1-5 and 10 and 11.

QUOTING RULES
Assume person=hatter and /home/alice is home directory

$person     hatter
"$person"   hatter
\$person    $person
'$person'   $person
'"$person"' 'hatter'
~alice      /home/alice
"~alice"    ~alice
'~alice'    ~alice


###########################################################################

COMMAND BUILTIN AND ENABLE

##########################

command

command removes alias and function lookup
Let's say you want to name your function the same as another existing command
Like:

ls()
{
echo "Listing files:"
command ls
}

What the above script does is define a function name ls, but there is already
a builtin command called ls, so we want to call the builtin command, which is why
we use "command".

COMMAND OPTIONS

-p: default value for PATH
-v: prints the command or pathname used to invoke the command
-V: A more verbose description than -v
-: turns off further option checking

which -p ls → Searches for ls in the default PATH.

which -v python → Shows the resolved path of python.

which -V python → Might show if python is an alias, function, or built-in.

which -- -special-command → Treats special-command as command or argument

####################

builtin

More restrictive than command. Looks up only built-in commands, ignores ones in PATH.

####################

enable

Allows shell-builtins to be enabled or disabled

-n: Used to disable a builtin

##########################################################

eval

eval statement tells the shell to take eval's arguments and run them
through the command-line processing steps all over again.

##############

